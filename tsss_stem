<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TSSS STEM Benchmark</title>
    <link rel="stylesheet" href="custom.css">
    <style>
        body {
            text-align: center;
        }
    
        .br-space {
            line-height: 2;
        }

        .bl-inline {
            font-size: 110%;
            font-weight: bold;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 0 auto;
        }

        th, td {
            padding: 10px;
            text-align: left;
            border: 1px solid #ddd;
        }

        th {
            cursor: pointer;
            background-color: #f2f2f2e4;
        }

        .collapsible {
            background-color: #f1f1f1;
            color: #000000;
            cursor: pointer;
            padding: 18px;
            width: 18vw;
            border: none;
            text-align: left;
            outline: none;
            font-size: 15px;
        }

        .active, .collapsible:hover {
            background-color: #ddd;
        }

        .content {
            padding: 0 18px;
            display: none;
            width: 15vw;
            overflow: hidden;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>
    <h1>The TSSS_STEM Benchmark</h1>
    <p>
        This benchmark grades a model's ability to solve math problems <br>
        and 'reason'. LLMs cannot technically 'reason', so this benchmark <br>
        uses a high-quality uncontaminated dataset of problems that are <br>
        less about pure crunching numbers and more about reasoning and<br>
        knowing HOW to do the problem.<br><br>

        Also, this dataset was compiled by one undergrad university student.<br>
        This dataset is not representative of all STEM use cases or subjects,<br>
        nor is it trying to be.<br><br>
    </p>
    <button class="collapsible" style="text-align: center">More Information</button>
    <div class="content">
        <p>
            <span class="bl-inline">30 questions total.</span><br>
            8 questions linear algebra, 10 questions calculus, 12 questions physics. All questions are 
            undergraduate level.
            <br class="br-space">
        </p>
    </div>


    <div style="height: 3vh"></div>
    <div class="container">
        <table id="scoreTable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th id="scoreHeader">Score <span id="sortIcon"></span></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>John Doe</td>
                    <td>85</td>
                </tr>
                <tr>
                    <td>Jane Smith</td>
                    <td>92</td>
                </tr>
                <tr>
                    <td>Sam Johnson</td>
                    <td>78</td>
                </tr>
            </tbody>
        </table>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const table = document.getElementById('scoreTable');
            const headers = table.querySelectorAll('th');
            const tableBody = table.querySelector('tbody');
            const rows = Array.from(tableBody.querySelectorAll('tr'));
            const sortIcon = document.getElementById('sortIcon');

            const directions = Array.from(headers).map(() => '');

            const transform = (index, content) => {
                const type = headers[index].getAttribute('data-type');
                switch (type) {
                    case 'number':
                        return parseFloat(content);
                    default:
                        return content;
                }
            };

            const sortColumn = (index) => {
                const direction = directions[index] || 'asc';
                const multiplier = direction === 'asc' ? 1 : -1;

                const newRows = rows.slice().sort((rowA, rowB) => {
                    const cellA = rowA.querySelectorAll('td')[index].innerHTML;
                    const cellB = rowB.querySelectorAll('td')[index].innerHTML;

                    const a = transform(index, cellA);
                    const b = transform(index, cellB);

                    switch (true) {
                        case a > b: return 1 * multiplier;
                        case a < b: return -1 * multiplier;
                        case a === b: return 0;
                    }
                });

                [].forEach.call(rows, row => row.parentNode.removeChild(row));

                newRows.forEach(newRow => tableBody.appendChild(newRow));

                directions[index] = direction === 'asc' ? 'desc' : 'asc';

                // Update the sort icon
                if (direction === 'asc') {
                    sortIcon.textContent = '↓';
                } else {
                    sortIcon.textContent = '↑';
                }
            };

            headers.forEach((header, index) => {
                header.addEventListener('click', () => {
                    sortColumn(index);
                });
            });

            // Collapsible section
            const coll = document.querySelector('.collapsible');
            coll.addEventListener('click', () => {
                coll.classList.toggle('active');
                const content = coll.nextElementSibling;
                if (content.style.display === 'block') {
                    content.style.display = 'none';
                } else {
                    content.style.display = 'block';
                }
            });
        });
    </script>
</body>
</html>
